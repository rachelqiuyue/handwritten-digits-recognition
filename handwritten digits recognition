{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "from keras.datasets import mnist\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1119044a8>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#test for showing mnist\n",
    "(x_train, y_train), (x_test, y_test) = mnist.load_data()\n",
    "%matplotlib inline \n",
    "image_index = 8888 \n",
    "print(y_train[image_index]) \n",
    "plt.imshow(x_train[image_index], cmap='Greys')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x_train shape: (60000, 28, 28, 1)\n",
      "Number of images in x_train 60000\n",
      "Number of images in x_test 10000\n"
     ]
    }
   ],
   "source": [
    "#reshape the array to fit keras\n",
    "x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)\n",
    "x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)\n",
    "input_shape = (28, 28, 1)\n",
    "x_train = x_train.astype('float32')\n",
    "x_test = x_test.astype('float32')\n",
    "# Normalizing the data\n",
    "x_train /= 255\n",
    "x_test /= 255\n",
    "print('x_train shape:', x_train.shape)\n",
    "print('Number of images in x_train', x_train.shape[0])\n",
    "print('Number of images in x_test', x_test.shape[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Sequential()\n",
    "#convolutional layer\n",
    "model.add(Conv2D(28, kernel_size=(3,3), input_shape=(28,28,1)))\n",
    "#pooling layer\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Flatten()) \n",
    "model.add(Dense(128,activation=tf.nn.relu))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(10,activation=tf.nn.softmax))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/15\n",
      "60000/60000 [==============================] - 31s 518us/step - loss: 0.2198 - acc: 0.9339\n",
      "Epoch 2/15\n",
      "60000/60000 [==============================] - 27s 454us/step - loss: 0.0884 - acc: 0.9732\n",
      "Epoch 3/15\n",
      "60000/60000 [==============================] - 28s 463us/step - loss: 0.0595 - acc: 0.9815\n",
      "Epoch 4/15\n",
      "60000/60000 [==============================] - 28s 467us/step - loss: 0.0440 - acc: 0.9859\n",
      "Epoch 5/15\n",
      "60000/60000 [==============================] - 28s 472us/step - loss: 0.0383 - acc: 0.9877\n",
      "Epoch 6/15\n",
      "60000/60000 [==============================] - 31s 515us/step - loss: 0.0299 - acc: 0.9897\n",
      "Epoch 7/15\n",
      "60000/60000 [==============================] - 29s 489us/step - loss: 0.0246 - acc: 0.9915\n",
      "Epoch 8/15\n",
      "60000/60000 [==============================] - 32s 541us/step - loss: 0.0220 - acc: 0.9927\n",
      "Epoch 9/15\n",
      "60000/60000 [==============================] - 34s 561us/step - loss: 0.0200 - acc: 0.9933\n",
      "Epoch 10/15\n",
      "60000/60000 [==============================] - 29s 477us/step - loss: 0.0161 - acc: 0.9946\n",
      "Epoch 11/15\n",
      "60000/60000 [==============================] - 28s 471us/step - loss: 0.0151 - acc: 0.9947\n",
      "Epoch 12/15\n",
      "60000/60000 [==============================] - 32s 534us/step - loss: 0.0172 - acc: 0.9945\n",
      "Epoch 13/15\n",
      "60000/60000 [==============================] - 31s 522us/step - loss: 0.0141 - acc: 0.9952\n",
      "Epoch 14/15\n",
      "60000/60000 [==============================] - 32s 528us/step - loss: 0.0139 - acc: 0.9955\n",
      "Epoch 15/15\n",
      "60000/60000 [==============================] - 30s 505us/step - loss: 0.0136 - acc: 0.9957\n",
      "10000/10000 [==============================] - 1s 149us/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.075855692616172379, 0.98529999999999995]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#optimizer\n",
    "\n",
    "model.compile(optimizer='adam', \n",
    "              loss='sparse_categorical_crossentropy', \n",
    "              metrics=['accuracy'])\n",
    "model.fit(x=x_train,y=y_train, epochs=15)\n",
    "#evaluate\n",
    "model.evaluate(x_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
